---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

const can_view_page = is_superuser || (user ? user.permissions.includes('auth.change_evecorporationmember') : false)

if (!can_view_page)
    return HTTP_404_Not_Found()

import type { CorporationMembers, SelectOptions } from '@dtypes/layout_components'
import { get_all_corporations_members } from '@helpers/fetching/corporations'

let corporations_members:CorporationMembers[] = []
let get_all_corporations_members_error:string | false = false

try {
    corporations_members = await get_all_corporations_members(auth_token as string)
    corporations_members.sort( (a, b) => {
        return b.members.length - a.members.length
    })
} catch (error) {
    get_all_corporations_members_error = is_prod_mode() ? t('get_all_corporations_members_error') : error.message
}

const CORPORATIONS_MEMBERS_PARTIAL_URL = translatePath('/partials/corporations_members_component')

let TOTAL_MEMBERS = 0
const CORPORATIONS_UNFILTERED = {}
corporations_members.forEach( (corporation) => {
    CORPORATIONS_UNFILTERED[corporation.corporation_id] = corporation.members.map( (member) => member.character_id )
    TOTAL_MEMBERS += corporation.members.length
})

const CORPORATIONS_MEMBERS_COUNT = {}
corporations_members.forEach( (corporation) => {
    CORPORATIONS_MEMBERS_COUNT[corporation.corporation_id] = corporation.members.length
})

const corporations_options = corporations_members.map( (corporation):SelectOptions => {
    return {
        value: corporation.corporation_id,
        label: corporation.corporation_name,
    }
} )

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import CorporationMembersList from '@components/blocks/CorporationMembersList.astro';
import TextBox from '@components/layout/TextBox.astro';
import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import Button from '@components/blocks/Button.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';

const page_title = t('corporations.members.page_title')
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/alliance-cover.jpg",
            image_990: "/images/alliance-cover-990.jpg",
            alt: t('alliance.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            global_collapsed: [],
            corporations_members: ${JSON.stringify(corporations_members)},
            corporations_unfiltered: ${JSON.stringify(CORPORATIONS_UNFILTERED)},
            corporations_filtered: ${JSON.stringify(CORPORATIONS_UNFILTERED)},
            corporations_filtered_members_count: ${JSON.stringify(CORPORATIONS_MEMBERS_COUNT)},
            total_members_filtered: ${TOTAL_MEMBERS},
            total_members_unfiltered: ${TOTAL_MEMBERS},
            corporations_options: ${JSON.stringify(corporations_options)},
            character_name: '',
            corporation_filter: '-1',
            filter() {
                console.log(this.character_name)
                if (this.character_name === '' && this.corporation_filter === '-1') {
                    this.corporations_filtered = this.corporations_unfiltered
                    this.corporations_filtered_memberss_count = ${JSON.stringify(CORPORATIONS_MEMBERS_COUNT)}
                    this.total_members_filtered = this.total_members_unfiltered
                    return
                }

                this.corporations_filtered = {}
                this.corporations_filtered_memberss_count = {}
                this.total_members_filtered = 0

                this.corporations_members.forEach( (corporation) => {
                    if (this.corporation_filter !== '-1' && parseInt(this.corporation_filter) !== corporation.corporation_id) {
                        this.corporations_filtered[corporation.corporation_id] = []
                        this.corporations_filtered_members_count[corporation.corporation_id] = 0
                        return true
                    }

                    const members = corporation.members.filter( (member) => member.character_name.toLowerCase().includes(this.character_name.toLowerCase()) )
                    
                    if (members.length > 0) {
                        this.total_members_filtered += members.length
                        this.corporations_filtered[corporation.corporation_id] = members.map( (member) => member.character_id )
                        this.corporations_filtered_members_count[corporation.corporation_id] = members.length
                    }
                })
            },
        }`}
    >
        <FlexInline slot="header" justification='space-between'>
            <PageTitle>
                {page_title}
            </PageTitle>
            <FlexInline>
                <Input type="text"
                    placeholder={t('filter')}
                    x-model="character_name"
                    x-on:keyup="filter()"
                >
                    <MagnifierIcon slot="icon" />
                </Input>
                
                <div class="[ hidden 2xl:block ]">
                    <Select
                        x-model="corporation_filter"
                        width='280px'
                        x-on:change="filter()"
                    >
                        <option selected value="-1">{t('corporations')}</option>
                        <template x-for="corporation in corporations_options">
                            <option x-bind:value="corporation.value" x-text="corporation.label" />
                        </template>
                    </Select>
                </div>
            </FlexInline>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox>
                <p>{t('corporations.members.leading_text')}</p>
            </TextBox>

            {get_all_corporations_members_error ?
                <CorporationMembersList
                    corporations={[]}
                >
                    <ErrorRefetch
                        args={{
                            partial: CORPORATIONS_MEMBERS_PARTIAL_URL,
                            message: get_all_corporations_members_error,
                            delay: 0,
                            target: '#corporations-members-list',
                        }}
                    />
                </CorporationMembersList>
                :
                <CorporationMembersList corporations={corporations_members} />
            }
        </Flexblock>
    </PageDefault>
</Viewport>