---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Forbidden()

import type { Group } from '@dtypes/api.minmatar.org'
import { get_available_groups } from '@helpers/api.minmatar.org/groups'

let groups:Group[] = []
let get_available_teams_error:string | false = false
try {
    groups = await get_available_groups(auth_token)
} catch (error) {
    get_available_teams_error = is_prod_mode() ? t('error') : error.message
}

import { get_app_url } from '@helpers/env'
const GROUPS_LIST_PARTIAL_URL = `${get_app_url()}/partials/groups_list_component/`

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import TextBox from '@components/layout/TextBox.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import GroupsList from '@components/blocks/GroupsList.astro';
import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

import ArrowDown from '@components/icons/buttons/ArrowDown.astro';

const page_title = t('groups.list.page_title');
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/groups-cover.jpg",
            image_990: "/images/groups-cover-990.jpg",
            alt: t('groups.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            group_name: '',
        }`}
    >
        <FlexInline slot="header" justification='space-between'>
            <FlexInline>
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        {page_title}
                    </PageTitle>
                    <small>{groups.length} {groups.length != 1 ? t('teams_available').toLowerCase() : t('team_available').toLowerCase()}</small>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                {(user.is_superuser || user?.permissions?.includes('auth.change_group')) &&
                    <Button class="[ !hidden md:!flex ]" href={translatePath('/alliance/teams/requests/')}>
                        <ArrowDown slot="icon" />
                        {t('team_requests')}
                    </Button>
                }
            </FlexInline>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox>
                <p>{t('teams.list.leading_text')}</p>
            </TextBox>

            {get_available_teams_error ?
                <GroupsList
                    groups={groups}
                    groups_type='team'
                >
                    <ErrorRefetch
                        args={{
                            partial: `${GROUPS_LIST_PARTIAL_URL}?groups_type=teams`,
                            message: get_available_teams_error,
                            delay: 0,
                            target: '#groups-list',
                        }}
                    />
                </GroupsList>
                :
                <GroupsList
                    groups={groups}
                    groups_type='team'
                />
            }
        </Flexblock>
	</PageDefault>
</Viewport>

<style lang="scss">
    h3 {
        margin-block-start: var(--space-l);
    }
</style>