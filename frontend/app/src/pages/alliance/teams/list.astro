---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import { is_prod_mode } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false
const user_id = !user ? false : user.user_id

import type { GroupItemUI } from '@dtypes/layout_components'
import { get_groups_auth, get_groups } from '@helpers/fetching/groups'

let groups:GroupItemUI[] = []
let get_groups_error:string
try {
    if (auth_token && user_id)
        groups = await get_groups_auth(auth_token, user_id, 'team')
    else
        groups = await get_groups('group')
} catch (error) {
    get_groups_error = is_prod_mode() ? t('get_groups_error') : error.message
}

import { get_app_url } from '@helpers/env'
const GROUPS_LIST_PARTIAL_URL = `${get_app_url()}/partials/groups_list_component`

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import TextBox from '@components/layout/TextBox.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';

import GroupsList from '@components/blocks/GroupsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

const page_title = t('teams.list.page_title');
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/groups-cover.jpg",
            image_990: "/images/groups-cover-990.jpg",
            alt: t('groups.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            group_name: '',
        }`}
    >
        <FlexInline slot="header" justification='space-between'>
            <Flexblock gap="var(--space-3xs)">
                <PageTitle>
                    {page_title}
                </PageTitle>
                <small>{groups.length} {groups.length != 1 ? t('teams_available').toLowerCase() : t('team_available').toLowerCase()}</small>
            </Flexblock>
        </FlexInline>

        <Flexblock gap="var(--space-xl)">
            <TextBox>
                <p>{t('teams.list.leading_text')}</p>
            </TextBox>

            {get_groups_error ?
                <GroupsList
                    groups={groups}
                    groups_type='group'
                >
                    <ErrorRefetch
                        args={{
                            partial: `${GROUPS_LIST_PARTIAL_URL}?groups_type=team`,
                            message: get_groups_error,
                            delay: 0,
                            target: '#groups-list',
                        }}
                    />
                </GroupsList>
                :
                <GroupsList
                    groups={groups}
                    groups_type='team'
                />
            }
        </Flexblock>
	</PageDefault>
</Viewport>

<style lang="scss">
    h3 {
        margin-block-start: var(--space-l);
    }
</style>