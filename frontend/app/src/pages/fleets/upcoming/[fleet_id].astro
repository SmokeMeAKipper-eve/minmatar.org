---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

const user_is_superadmin = (auth_token && user ? user.is_superuser : false)

if (is_prod_mode() && !user_is_superadmin)
    return HTTP_404_Not_Found()

const fleet_id = parseInt(Astro.params.fleet_id)

if (isNaN(fleet_id))
    return HTTP_404_Not_Found()

import type { FleetUI } from '@dtypes/layout_components'
import { fetch_fleet_by_id } from '@helpers/fetching/fleets'

let fetch_fleets_error:string | false = false
let fleet:FleetUI

try {
    fleet = await fetch_fleet_by_id(auth_token as string, fleet_id)
} catch (error) {
    fetch_fleets_error = is_prod_mode() ? t('fetch_fleets_error') : error.message
}

const FLEET_DETAIL_PARTIAL_URL = translatePath(`/partials/fleet_detail_component?fleet_id=${fleet_id}&upcoming=${JSON.stringify(true)}`)

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';

import FleetDetails from '@components/blocks/FleetDetails.astro';
import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

import AddIcon from '@components/icons/buttons/AddIcon.astro';
import FleetIcon from '@components/icons/buttons/FleetIcon.astro';

const page_title = `${t('fleet')} ${fleet?.id ?? ''}`;
---

<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/fleets-cover.jpg",
            image_990: "/images/fleets-cover-990.jpg",
            alt: t('fleets.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
    >
        <FlexInline slot="header" justification='space-between'>
            <FlexInline>
                <PageTitle>
                    {page_title}
                </PageTitle>
            </FlexInline>
            <FlexInline>
                <Button class="[ !hidden md:!flex ]" href={translatePath('/fleets/upcoming')}>
                    <FleetIcon slot="icon" />
                    {t('upcoming_fleets')}
                </Button>
                <Button color={'green'} class="[ !hidden lg:!flex ]" href={translatePath('/fleets/add')}>
                    <AddIcon slot="icon" />
                    {t('schedule_fleet')}
                </Button>
            </FlexInline>
        </FlexInline>

        {fetch_fleets_error ?
            <ErrorRefetch
                args={{
                    partial: FLEET_DETAIL_PARTIAL_URL,
                    message: fetch_fleets_error,
                    delay: 0,
                }}
            />
            :
            <FleetDetails fleet={fleet} />
        }
    </PageDefault>
</Viewport>