---

import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

const user_is_superadmin = (auth_token && user ? user.is_superuser : false)

if (is_prod_mode() && !user_is_superadmin)
    return HTTP_404_Not_Found()

if (Astro.request.method === "POST") {
    // TODO: Call to add fleet endpoint here with data from "await Astro.request.formData()"
    console.log(`TODO: Call to add fleet endpoint here with data from "await Astro.request.formData()"`)

    return Astro.redirect(translatePath('/fleets/upcoming'))
}

import audiences from '@json/hosted/audience.select.options.json';
import fleet_types from '@json/hosted/fleet_type.select.options.json';
import doctrines from '@json/page/doctrines/alliance.json';

import type { DoctrineItemObj } from '@dtypes/layout_components';

const doctrines_select_options = doctrines.map( (item) => { return { name: item.doctrine_name, id: item.id } } )
console.log(doctrines_select_options)
const fleet_types_select_options = Array.from(Object.entries(fleet_types), ([key, value]) => { return {"id": key, "name": value} })
const audiences_select_options = Array.from(Object.entries(audiences), ([key, value]) => { return {"id": key, "name": value} })
const default_doctrine = doctrines_select_options[0].id

const doctrine:DoctrineItemObj = doctrines.filter( (item) => item.id == default_doctrine )[0]


import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import Flexblock from '@components/compositions/Flexblock.astro';
import FlexInline from '@components/compositions/FlexInline.astro';
import FixedFluid from '@components/compositions/FixedFluid.astro';
import Wrapper from '@components/compositions/Wrapper.astro';

import Button from '@components/blocks/Button.astro';
import ThumbCard from '@components/blocks/ThumbCard.astro';
import VerticalCenter from '@components/blocks/VerticalCenter.astro';
import TextGroup from '@components/blocks/TextGroup.astro';
import ComponentBlock from '@components/blocks/ComponentBlock.astro';
import Input from '@components/blocks/Input.astro';
import Select from '@components/blocks/Select.astro';
import Textarea from '@components/blocks/Textarea.astro';
import DoctrineItem from '@components/blocks/DoctrineItem.astro';

import HistoryIcon from '@components/icons/buttons/HistoryIcon.astro';
import FleetIcon from '@components/icons/buttons/FleetIcon.astro';

const page_title = t('fleets.add.page_title');
const today = new Date().toISOString().split("T")[0]
---

<Viewport title={page_title}>
    <PageDefault
        cover={{
            image: "/images/fleets-cover.jpg",
            image_990: "/images/fleets-cover-990.jpg",
            alt: t('fleets.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            fleet_type: 'fun_fleet',
            audience: 'alliance',
            eve_date: '${today}',
            eve_time: '00:00:00',
            local_datetime: '',
            audiences: ${JSON.stringify(audiences)},
            fleet_types: ${JSON.stringify(fleet_types)},
            get_images() {
                let images = [];

                document.querySelectorAll('.confetti-image').forEach((img) => {
                    images.push({
                        src: img.getAttribute('src'),
                        width: 64,
                        height: 64,
                    })
                })
                
                return images
            },
            fleet_datetime(utc) {
                const date_time = this.eve_date+' '+this.eve_time
                const date_string = new Date(date_time+(utc ? ' UTC' : '')).toLocaleDateString(
                    '${lang}',
                    ${import.meta.env.DATETIME_FORMAT}
                )

                return (date_string != 'Invalid Date' ? date_string : '${t('waiting_fleet_time')}')
            },
        }`}
    >

        <FlexInline slot="header" justification='space-between'>
            <FlexInline>
                <PageTitle>
                    {page_title}
                </PageTitle>
            </FlexInline>
            <FlexInline>
                <Button class="[ !hidden md:!flex ]" href={translatePath('/fleets/upcoming')}>
                    <FleetIcon slot="icon" />
                    {t('upcoming_fleets')}
                </Button>
                <Button class="[ !hidden lg:!flex ]" href={translatePath('/fleets/history')}>
                    <HistoryIcon slot="icon" />
                    {t('fleet_history')}
                </Button>
            </FlexInline>
        </FlexInline>

        <form
            method="POST"
            x-data={`{
                'submitted': false
            }`}
            x-on:submit.prevent="launch_confetti(get_images()); submitted = true;"
        >
            <Flexblock gap="var(--space-3xs)">
                <Wrapper max_width="var(--max-col-width)" padding_inline="0" padding_block="0">
                    <Flexblock gap="var(--space-3xs)">
                        <ComponentBlock>
                            <Flexblock class="[ w-full ]" gap='var(--space-m)'>
                                <h2>{t('fleet_information')} (1/3)</h2>

                                <p>{t('fleets.add.form_info')}</p>

                                <Flexblock>
                                    <VerticalCenter>
                                        <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                            <label for="doctrine">{t('doctrine')}</label>
                                            <Select
                                                id="doctrine"
                                                name="doctrine_id"
                                                hx-get={translatePath('/partials/doctrine')}
                                                hx-target="#doctrine-hx-target"
                                                hx-trigger="change"
                                                hx-swap="innerHTML transition:true"
                                                hx-indicator=".loader"
                                            >
                                                {doctrines_select_options.map((option) => 
                                                    <option value={option.id}>{option.name}</option>
                                                )}
                                            </Select>
                                        </FixedFluid>
                                    </VerticalCenter>

                                    <VerticalCenter>
                                        <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                            <label for="fleet_date">{t('fleet_date')}</label>
                                            <Input id="fleet_date" type="date" x-model="eve_date" required min={today} value={today} />
                                        </FixedFluid>
                                    </VerticalCenter>

                                    <VerticalCenter>
                                        <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                            <label for="fleet_time">{t('fleet_time')}</label>
                                            <Input id="fleet_time" type="time" step="2" value="00:00:00" x-model="eve_time" required />
                                        </FixedFluid>
                                    </VerticalCenter>

                                    <VerticalCenter>
                                        <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                            <label for="type">{t('type')}</label>
                                            <Select id="type" x-model="fleet_type">
                                                {fleet_types_select_options.map((option) => 
                                                    <option value={option.id}>{option.name}</option>
                                                )}
                                            </Select>
                                        </FixedFluid>
                                    </VerticalCenter>

                                    <VerticalCenter>
                                        <FixedFluid class="[ w-full items-center ]" gap="var(--space-3xs)" width="250px" breakpoint="60%">
                                            <label for="audience">{t('audience')}</label>
                                            <Select id="audience" x-model="audience">
                                                {audiences_select_options.map((option) => 
                                                    <option value={option.id}>{option.name}</option>
                                                )}
                                            </Select>
                                        </FixedFluid>
                                    </VerticalCenter>

                                    <VerticalCenter>
                                        <Flexblock class="[ w-full ]" gap="var(--space-3xs)">
                                            <label for="description">{t('description')}</label>
                                            <Textarea id="description" name="fitting" rows="5" />
                                        </Flexblock>
                                    </VerticalCenter>
                                </Flexblock>
                            </Flexblock>
                        </ComponentBlock>

                        <Flexblock gap='2px'>
                            <ComponentBlock>
                                <h2>{t('confirm')} (2/3)</h2>
                            </ComponentBlock>

                            <ThumbCard
                                thumb_name="Beautiful Mim"
                                thumb_image="https://images.evetech.net/characters/2121103796/portrait?size=512"
                                thumb_image_small="https://images.evetech.net/characters/2121103796/portrait?size=512"
                                thumb_image_alt="Beautiful Mim profile picture"
                                thumb_title={t('fleet_commander')}
                            >
                                <VerticalCenter>
                                    <Flexblock gap="var(--space-s-m)">
                                        <TextGroup title={t('type')} x-text="fleet_types[fleet_type]">
                                            {t('fun_fleet')}
                                        </TextGroup>
                                        <TextGroup title={t('audience')} x-text="audiences[audience]">
                                            {t('alliance')}
                                        </TextGroup>
                                    </Flexblock>
                                </VerticalCenter>
                                
                                <VerticalCenter>
                                    <Flexblock gap="var(--space-s-m)">
                                        <TextGroup
                                            title={t('eve_time')}
                                            class="[ sentence-cap ]"
                                            x-text="fleet_datetime()"
                                        >    
                                            {t('waiting_fleet_time')}
                                        </TextGroup>
                                        <TextGroup
                                            title={t('local_time')}
                                            class="[ sentence-cap ]"
                                            x-text="fleet_datetime(true)"
                                        >
                                            {t('waiting_fleet_time')}
                                        </TextGroup>
                                    </Flexblock>
                                </VerticalCenter>
                            </ThumbCard>

                            <ComponentBlock id="doctrine-hx-target">
                                <DoctrineItem role="listitem" doctrine={doctrine} />
                            </ComponentBlock>
                        </Flexblock>

                        <ComponentBlock>
                            <Flexblock class="[ w-full ]" gap='var(--space-m)'>
                                <h2>{t('fleet_submit')} (3/3)</h2>

                                <Button x-bind:disabled="submitted" type="submit" color={'green'} class="[ w-full ]">{t('push_button')}</Button>
                            </Flexblock>
                        </ComponentBlock>
                    </Flexblock>
                </Wrapper>
            </Flexblock>
        </form>
	</PageDefault>
</Viewport>