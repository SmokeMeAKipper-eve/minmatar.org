---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Not_Found()

if (!user.is_superuser /*&& !user?.permissions?.includes('auth.change_group')*/)
    return HTTP_404_Not_Found()

const character_id = parseInt(Astro.url.searchParams.get('character_id'))
if (isNaN(character_id))
    return HTTP_404_Not_Found()

import type { SkillsetsUI } from '@dtypes/layout_components'
import { get_skillsets } from '@helpers/fetching/characters'

let character_skillsets:SkillsetsUI
let get_character_skillsets_error:string | false = false
try {
    character_skillsets = await get_skillsets(auth_token, character_id)
} catch (error) {
    get_character_skillsets_error = is_prod_mode() ? t('get_character_skillsets_error') : error.message
}

const SKILLSETS_LIST_PARTIAL_URL = translatePath('/partials/skillsets_list_component')

import Viewport from '@layouts/Viewport.astro';

import PageDefault from '@components/page/PageDefault.astro';
import PageTitle from '@components/page/PageTitle.astro';

import FlexInline from '@components/compositions/FlexInline.astro';
import Flexblock from '@components/compositions/Flexblock.astro';

import SkillsetsList from '@components/blocks/SkillsetsList.astro';
import Button from '@components/blocks/Button.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
import CharacterPicture from '@components/blocks/CharacterPicture.astro';

import MagnifierIcon from '@components/icons/buttons/MagnifierIcon.astro';

const skillsets_count = character_skillsets?.skillsets.length ?? 0

const page_title = `${character_skillsets?.character_name ?? ''} ${t('skillsets').toLowerCase()}`
---
<Viewport
    title={page_title}
    components={{
        alert_dialog: true,
        confirm_dialog: true,
        modal: true,
    }}
>
    <PageDefault
        cover={{
            image: "/images/skillsets-cover.jpg",
            image_990: "/images/skillsets-cover-990.jpg",
            alt: t('skillsets.cover_alt'),
            animated: false,
            scrollable: true,
            overlay: true
        }}
        x-data={`{
            character_id: false,
            character_name: '',
            skillsets_count: ${skillsets_count},
        }`}
    >
        <FlexInline slot="header" justification='space-between'>
            <FlexInline>
                <CharacterPicture
                    character_id={character_skillsets?.character_id ?? 0}
                    character_name={character_skillsets?.character_name ?? ''}
                    x_character_id="character_id"
                    x_character_name="character_id"
                />
                <Flexblock gap="var(--space-3xs)">
                    <PageTitle>
                        <span x-text="character_name" /> {page_title}
                    </PageTitle>
                    <small x-text={`\`\${skillsets_count} \${skillsets_count != 1 ? '${t('skillsets').toLowerCase()}' : '${t('skillset').toLowerCase()}'} ${t('in_progress').toLowerCase()}\``}>
                        {skillsets_count} {skillsets_count != 1 ? t('skillsets').toLowerCase() : t('skillset').toLowerCase()} {t('in_progress').toLowerCase()}
                    </small>
                </Flexblock>
            </FlexInline>
            <FlexInline>
                <Button class="[ !hidden md:!flex ]" href={translatePath(`/character/assets?character_id=${character_id}`)}>
                    <MagnifierIcon slot="icon" />
                    {t('view_assets')}
                </Button>
            </FlexInline>
        </FlexInline>

        {get_character_skillsets_error ?
            <SkillsetsList
                skillsets={[]}
                character={{
                    character_id: character_id,
                    character_name: '',
                }}
            >
                <ErrorRefetch
                    args={{
                        partial: `${SKILLSETS_LIST_PARTIAL_URL}?character_id=${character_id}`,
                        message: get_character_skillsets_error,
                        delay: 0,
                        target: '#skillset-list',
                    }}
                />
            </SkillsetsList>
            :
            <SkillsetsList
                skillsets={character_skillsets.skillsets}
                character={{
                    character_id: character_skillsets.character_id,
                    character_name: character_skillsets.character_name,
                }}
            />
        }
    </PageDefault>
</Viewport>