---
import { getLangFromUrl, useTranslations } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user)
    return HTTP_404_Not_Found()

if (!user.is_superuser /*&& !user?.permissions?.includes('auth.change_group')*/)
    return HTTP_404_Not_Found()

const character_id = parseInt(Astro.url.searchParams.get('character_id'))
if (isNaN(character_id))
    return HTTP_404_Not_Found()

import type { AssetsUI, CharacterBasic } from '@dtypes/layout_components'
import { get_assets } from '@helpers/fetching/characters'

let character_assets:AssetsUI = {
    character_id: 0,
    character_name: '',
    locations: [],
    location_icons: [],
}
let get_character_assets_error:string | false = false
try {
    character_assets = await get_assets(auth_token, character_id)
} catch (error) {
    get_character_assets_error = is_prod_mode() ? t('get_character_assets_error') : error.message
}

import { get_app_url } from '@helpers/env'
const ASSETS_LIST_PARTIAL_URL = `${get_app_url()}/partials/assets_list_component`

const assets_stations:string[] = character_assets.locations.map( (location):string => location.location_name )

let total_assets_count = 0
character_assets.locations.forEach( (i) => total_assets_count += i.assets.reduce( (c, i) => c + i.count , 0) )

const character_info:CharacterBasic = {
    character_id: character_assets?.character_id ?? 0,
    character_name: character_assets?.character_name ?? '',
}

const delay = parseInt(Astro.url.searchParams.get('delay'))

import AssetsListAlpine from '@components/blocks/AssetsListAlpine.astro';

import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_character_assets_error ?
    <AssetsListAlpine>
        <ErrorRefetch
            args={{
                partial: `${ASSETS_LIST_PARTIAL_URL}?character_id=${character_id}`,
                message: get_character_assets_error,
                delay: delay,
                target: '#assets-list',
            }}
        />
    </AssetsListAlpine>
    :
    <AssetsListAlpine
        x-data={`{
            init() {
                assets_locations = ${JSON.stringify(character_assets.locations)}
                assets_locations_icons = ${JSON.stringify(character_assets.location_icons)}
                assets_locations_filtered = ${JSON.stringify(character_assets.locations)}
                total_assets_count = ${total_assets_count}
                total_assets_count_unfiltered = ${total_assets_count}
                locations_options = ${JSON.stringify(assets_stations)}
                character_id = ${character_info.character_id}
                character_name = '${character_info.character_name}'
            }
        }`}
    />
}