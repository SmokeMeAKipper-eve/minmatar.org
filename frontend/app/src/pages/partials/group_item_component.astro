---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang)

import { is_prod_mode } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

import type { Alert, GroupItemType } from '@dtypes/layout_components'
const group_id = parseInt(Astro.url.searchParams.get('id'))
const type = Astro.url.searchParams.get('type') as GroupItemType

let alert:Alert | false = false

import type { Group, GroupRequest } from '@dtypes/api.minmatar.org'
import { get_group_by_id, create_group_request } from '@helpers/api.minmatar.org/groups'
import { query_string } from '@helpers/string';

let group_join_request:GroupRequest | false = false
let create_group_request_error:string | false = false
if (Astro.request.method === "POST") {
    try {
        group_join_request = await create_group_request(auth_token, group_id)
    } catch (error) {
        create_group_request_error = is_prod_mode() ? t('create_group_joining_request_error') : error.message
    }
}

let group:Group
let get_group_request_error:string | false = false
try {
    group = await get_group_by_id(auth_token, group_id)
} catch (error) {
    get_group_request_error = is_prod_mode() ? t('get_group_request_error') : error.message
}

if (create_group_request_error) {
    alert = {
        title: (type === 'team' ? t('team_join_request_dialog_title') : t('group_join_request_dialog_title')),
        content: create_group_request_error,
    }

    if (group) {
        const params = query_string({
            name: group.name,
            description: group.description,
            image_url: JSON.stringify(group.image_url),
            message: create_group_request_error,
            type: type,
        })

        alert.partial = `${translatePath('/partials/dialog_with_group/')}?${params}`
    }
}

import { get_app_url } from '@helpers/env'
const GROUP_ITEM_PARTIAL_URL = `${get_app_url()}/partials/group_item_component/`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import Partial from '@layouts/Partial.astro';

import GroupItem from '@components/blocks/GroupItem.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';

const partial_query_string = query_string({
    id: group.id.toString(),
    type: type,
})
---

<Partial>
    {get_group_request_error ?
        <ErrorRefetch
            args={{
                partial: `${GROUP_ITEM_PARTIAL_URL}${partial_query_string}`,
                message: get_group_request_error,
                delay: delay,
                target: `#group-item-${group_id}`,
            }}
        />
        :
        <GroupItem
            group={group}
            alert={alert}
            type={type}
        />
    }
</Partial>