---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { prod_error_messages } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_applications = user_permissions.includes('applications.change_evecorporationapplication')

if (!auth_token || !can_view_applications)
    return HTTP_404_Not_Found()

import type { CorporationApplications, SelectOptions, Alert } from '@dtypes/layout_components'
import { get_all_corporations_applications } from '@helpers/fetching/applications'

let corporations_applications:CorporationApplications[] = []
let get_all_corporations_applications_error:string | false = false
try {
    corporations_applications = await get_all_corporations_applications(auth_token)
    corporations_applications.sort( (a, b) => {
        return b.applications.length - a.applications.length
    })
} catch (error) {
    get_all_corporations_applications_error = prod_error_messages() ? t('get_all_corporations_applications_error') : error.message
}

const CORPORATIONS_APPLICATIONS_PARTIAL_URL = translatePath('/partials/corporations_applications_component')

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

let TOTAL_APPLICATIONS = 0
const CORPORATIONS_UNFILTERED = {}
corporations_applications.forEach( (corporation) => {
    CORPORATIONS_UNFILTERED[corporation.corporation_id] = corporation.applications.map( (application) => application.id )
    TOTAL_APPLICATIONS += corporation.applications.length
})

const CORPORATIONS_APPLICATIONS_COUNT = {}
corporations_applications.forEach( (corporation) => {
    CORPORATIONS_APPLICATIONS_COUNT[corporation.corporation_id] = corporation.applications.length
})

const corporations_options = corporations_applications.map( (corporation):SelectOptions => {
    return {
        value: corporation.corporation_id,
        label: corporation.corporation_name,
    }
} )

import CorporationApplicationsList from '@components/blocks/CorporationApplicationsList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_all_corporations_applications_error ?
    <ErrorRefetch
        args={{
            partial: CORPORATIONS_APPLICATIONS_PARTIAL_URL,
            message: get_all_corporations_applications_error,
            delay: delay,
        }}
    />
    :
    <CorporationApplicationsList
        corporations={corporations_applications}
        x-data={`{
            init() {
                corporations_applications = ${JSON.stringify(corporations_applications)}
                corporations_unfiltered = ${JSON.stringify(CORPORATIONS_UNFILTERED)}
                corporations_filtered = ${JSON.stringify(CORPORATIONS_UNFILTERED)}
                corporations_filtered_applications_count = ${JSON.stringify(CORPORATIONS_APPLICATIONS_COUNT)}
                total_applications_filtered = ${TOTAL_APPLICATIONS}
                total_applications_unfiltered = ${TOTAL_APPLICATIONS}
                corporations_options = ${JSON.stringify(corporations_options)}
            }
        }`}
    />
}