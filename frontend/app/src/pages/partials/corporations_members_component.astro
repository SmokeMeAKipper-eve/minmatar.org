---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

import { is_prod_mode } from '@helpers/env'
import { HTTP_404_Not_Found } from '@helpers/http_responses'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user = auth_token ? jose.decodeJwt(auth_token) as User : false
const is_superuser = (user ? user?.is_superuser : false)

import { get_user_permissions } from '@helpers/permissions'
const user_permissions = (user ? await get_user_permissions(user?.username) : [])

const can_view_page = is_superuser || user_permissions.includes('auth.change_evecorporationmember')

if (!can_view_page)
    return HTTP_404_Not_Found()

import type { CorporationMembers, SelectOptions } from '@dtypes/layout_components'
import { get_all_corporations_members } from '@helpers/fetching/corporations'

let corporations_members:CorporationMembers[] = []
let get_all_corporations_members_error:string | false = false
let MAIN_COUNT = 0
let UNREGISTERED_COUNT = 0
let ALLIANCE_MEMBERS_COUNT = 0

const status = (Astro.url.searchParams.get('status') ?? 'registered')

try {
    corporations_members = await get_all_corporations_members(auth_token as string)
    
    corporations_members.sort( (a, b) => {
        return b.members.length - a.members.length
    })

    corporations_members = corporations_members.map( (corporation) => {
        ALLIANCE_MEMBERS_COUNT += corporation.members.length
        MAIN_COUNT += corporation.members.filter( (member) => member.is_main ).length

        const unregistered_members = corporation.members.filter( (member) => !member.registered )

        if (status === 'unregistered')
            corporation.members = unregistered_members
        
        UNREGISTERED_COUNT += unregistered_members.length
        
        return corporation
    })

    corporations_members = corporations_members.filter( (corporation) => corporation.members.length > 0 )
} catch (error) {
    get_all_corporations_members_error = is_prod_mode() ? t('get_all_corporations_members_error') : error.message
}

const CORPORATIONS_MEMBERS_PARTIAL_URL = translatePath('/partials/corporations_members_component')

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

let TOTAL_MEMBERS = 0
const CORPORATIONS_UNFILTERED = {}
corporations_members.forEach( (corporation) => {
    CORPORATIONS_UNFILTERED[corporation.corporation_id] = corporation.members.map( (member) => member.character_id )
    TOTAL_MEMBERS += corporation.members.length
})

const CORPORATIONS_MEMBERS_COUNT = {}
corporations_members.forEach( (corporation) => {
    CORPORATIONS_MEMBERS_COUNT[corporation.corporation_id] = corporation.members.length
})

const corporations_options = corporations_members.map( (corporation):SelectOptions => {
    return {
        value: corporation.corporation_id,
        label: corporation.corporation_name,
    }
} )

import CorporationMembersList from '@components/blocks/CorporationMembersList.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_all_corporations_members_error ?
    <CorporationMembersList
        corporations={[]}
        type='corporation'
    >
        <ErrorRefetch
            args={{
                partial: CORPORATIONS_MEMBERS_PARTIAL_URL,
                message: get_all_corporations_members_error,
                delay: delay,
                target: '#corporations-members-list',
            }}
        />
    </CorporationMembersList>
    :
    <CorporationMembersList
        corporations={corporations_members}
        x-data={`{
            init() {
                MAIN_COUNT = ${MAIN_COUNT}
                ALLIANCE_MEMBERS_COUNT = ${ALLIANCE_MEMBERS_COUNT}
                UNREGISTERED_COUNT = ${UNREGISTERED_COUNT}
                corporations_members = ${JSON.stringify(corporations_members)}
                corporations_unfiltered = ${JSON.stringify(CORPORATIONS_UNFILTERED)}
                corporations_filtered = ${JSON.stringify(CORPORATIONS_UNFILTERED)}
                corporations_filtered_members_count = ${JSON.stringify(CORPORATIONS_MEMBERS_COUNT)}
                total_members_filtered = ${TOTAL_MEMBERS}
                total_members_unfiltered = ${TOTAL_MEMBERS}
                corporations_options = ${JSON.stringify(corporations_options)}
            }
        }`}
    />
}