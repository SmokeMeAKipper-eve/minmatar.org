---
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang)

import { is_prod_mode } from '@helpers/env'

import type { User } from '@dtypes/jwt'
import * as jose from 'jose'

const auth_token = Astro.cookies.has('auth_token') ? Astro.cookies.get('auth_token').value : false
const user:User | false = auth_token ? jose.decodeJwt(auth_token) as User : false

if (!auth_token || !user) {
    Astro.cookies.set('redirect_after_auth', Astro.url.href, { path: '/' })
    return Astro.redirect(get_auth_url())
}

const corporation_id:number = parseInt(Astro.url.searchParams.get('id'))

import type { Alert, CorporationObject } from '@dtypes/layout_components'

let alert:Alert | false = false

import { create_corporation_application } from '@helpers/api.minmatar.org/applications'
import { get_corporation_list_by_id_auth, get_corporation_list_by_id } from '@helpers/fetching/corporations'
import { query_string } from '@helpers/string';

let create_corporation_application_error:string | false = false
if (Astro.request.method === "POST") {
    try {
        await create_corporation_application(auth_token, corporation_id)
    } catch (error) {
        create_corporation_application_error = is_prod_mode() ? t('create_corporation_application_error') : error.message
    }
}

let corporation:CorporationObject
let get_corporation_error:string | false = false
try {
    if (auth_token)
        corporation = await get_corporation_list_by_id_auth(auth_token, corporation_id, user.user_id)
    else
        corporation = await get_corporation_list_by_id(corporation_id)
} catch (error) {
    get_corporation_error = is_prod_mode() ? t('get_corporation_error') : error.message
}

if (create_corporation_application_error) {
    alert = {
        title: t('corporation_join_request_dialog_title'),
        content: create_corporation_application_error,
    }

    if (corporation) {
        const params:any = corporation
        params.message = create_corporation_application_error

        alert.partial = `${translatePath('/partials/dialog_with_corporation/')}?${query_string(params)}`
    }
}

import { get_app_url } from '@helpers/env'
const CORPORATION_ITEM_PARTIAL_URL = `${get_app_url()}/partials/corporation_item_component/`

const delay = parseInt(Astro.url.searchParams.get('delay') ?? '0')

import CorporationItem from '@components/blocks/CorporationItem.astro';
import ErrorRefetch from '@components/blocks/ErrorRefetch.astro';
---

{get_corporation_error ?
    <ErrorRefetch
        args={{
            partial: `${CORPORATION_ITEM_PARTIAL_URL}?id=${corporation_id}`,
            message: get_corporation_error,
            delay: delay,
            target: `#corporation-item-${corporation_id}`,
        }}
    />
    :
    <CorporationItem
        corporation={corporation}
        alert={alert}
    />
}